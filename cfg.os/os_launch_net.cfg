#
# This is to launch OpenStack net instances with CLI on the controller node
#
# ref: https://docs.openstack.org/ocata/install-guide-ubuntu
#
# Prerequisites:
#   - The basic IP network should be up running; and
#   - The ssh connection should be configured with out passwd typed
#     e.g., echo "stack ALL=(ALL) NOPASSWD: ALL" | tee -a /etc/sudoers
#
# The global variables for this project
#
OS_CONTROLLER_IF_MANAGEMENT := 10.0.0.11/24

OS_CONTROLLER_IF_PROVIDER_NAME := enp0s25
OS_COMPUTE1_IF_PROVIDER_NAME := enp3s0f1

OS_NET := 10.0.0.0/24
OS_CONTROLLER_NAME := controller
OS_CONTROLLER_IP := 10.0.0.11
OS_COMPUTE1_NODE_NAME := compute1
OS_COMPUTE1_NODE_IP := 10.0.0.31
OS_BLOCK1_NODE_NAME := block1
OS_BLOCK1_NODE_IP := 10.0.0.41
OS_OBJECT1_NODE_NAME := object1
OS_OBJECT1_NODE_IP := 10.0.0.51
OS_OBJECT2_NODE_NAME := object2
OS_OBJECT2_NODE_IP := 10.0.0.52


# For the provider network and subnets
PROVIDER_NETWORK_CIDR := 192.168.1.0/24
PROVIDER_NETWORK_GATEWAY := 192.168.1.1
START_IP_ADDRESS := 192.168.1.101
END_IP_ADDRESS := 192.168.1.199
DNS_RESOLVER := 192.168.1.1

# For the self-service network and subnets
SELFSERVICE_NETWORK_CIDR := 172.16.1.0/24
SELFSERVICE_NETWORK_GATEWAY := 172.16.1.1
SELFSERVICE_DNS_RESOLVER := 192.168.1.1

# The provider net id
PROVIDER_NET_ID := 
SELFSERVICE_NET_ID :=
PROVIDER_FLOATING_IP1 :=

# The stable ntp server either name or ip:
OS_NTP_SERVER := 10.121.52.95

OS_ADMIN_CLI := export no_proxy=localhost,127.0.0.1,controller,compute1; openstack --os-auth-url http://controller:35357/v3 --os-project-domain-name Default --os-user-domain-name Default --os-project-name admin --os-identity-api-version=3 --os-image-api-version=2 --os-username admin --os-password=stack

OS_ADMIN_CLI_NEUTRON := export no_proxy=localhost,127.0.0.1,controller,compute1; neutron --os-auth-url http://controller:35357/v3 --os-project-domain-name Default --os-user-domain-name Default --os-project-name admin --os-username admin --os-password=stack

OS_DEMO_CLI := export no_proxy=localhost,127.0.0.1,controller,compute1; openstack --os-auth-url http://controller:5000/v3 --os-project-domain-name default --os-user-domain-name default --os-identity-api-version=3 --os-image-api-version=2 --os-project-name demo --os-username demo --os-password=demo

#
# Ubuntu routine package update
#

STEP_000.CMD := sudo pwd
STEP_000.description:= Root privilege required for this setup


#
# Create Virtual Networks and router (for self-service networks)
#

STEP_900_CMD := $::TQ_CONFIG{OS_ADMIN_CLI} server delete selfservice-instance; $::TQ_CONFIG{OS_ADMIN_CLI} server delete provider-instance; $::TQ_CONFIG{OS_ADMIN_CLI} router remove subnet router selfservice; $::TQ_CONFIG{OS_ADMIN_CLI} router delete router; $::TQ_CONFIG{OS_ADMIN_CLI} subnet delete selfservice; $::TQ_CONFIG{OS_ADMIN_CLI} subnet delete provider; $::TQ_CONFIG{OS_ADMIN_CLI} network delete selfservice; $::TQ_CONFIG{OS_ADMIN_CLI} network delete provider; $::TQ_CONFIG{OS_ADMIN_CLI} router delete router; pwd
STEP_900.description := Delete the network and routers

STEP_901_CMD := $::TQ_CONFIG{OS_ADMIN_CLI} network create  --share --external --provider-physical-network provider --provider-network-type flat provider; pwd
STEP_901.description := Create the provider network - net_id should be used later

STEP_902_CMD := $::TQ_CONFIG{OS_ADMIN_CLI} subnet create --network provider --allocation-pool start=$::TQ_CONFIG{START_IP_ADDRESS},end=$::TQ_CONFIG{END_IP_ADDRESS} --dns-nameserver $::TQ_CONFIG{DNS_RESOLVER} --gateway $::TQ_CONFIG{PROVIDER_NETWORK_GATEWAY} --subnet-range $::TQ_CONFIG{PROVIDER_NETWORK_CIDR} provider
STEP_902.description := Create the subnet on the provider network

STEP_903_CMD := $::TQ_CONFIG{OS_ADMIN_CLI} network create selfservice
STEP_903.description := Create the self-service network

STEP_904_CMD := $::TQ_CONFIG{OS_ADMIN_CLI} subnet create --network selfservice  --dns-nameserver $::TQ_CONFIG{SELFSERVICE_DNS_RESOLVER} --gateway $::TQ_CONFIG{SELFSERVICE_NETWORK_GATEWAY} --subnet-range $::TQ_CONFIG{SELFSERVICE_NETWORK_CIDR} selfservice
STEP_904.description := Create the subnet on the self-service network

STEP_905_CMD := $::TQ_CONFIG{OS_ADMIN_CLI} router create router
STEP_905.description := Create the router

STEP_906_CMD := $::TQ_CONFIG{OS_ADMIN_CLI} router add subnet router selfservice
STEP_906.description := Add the self-service network subnet into the router

STEP_907_CMD := $::TQ_CONFIG{OS_ADMIN_CLI} router set router --external-gateway provider
STEP_907.description := Set a gateway on the provider network on the router

STEP_908_CMD := $::TQ_CONFIG{OS_ADMIN_CLI} floating ip create provider
STEP_908.description := Create the floating ip for the self-service

STEP_909_CMD := $::TQ_CONFIG{OS_ADMIN_CLI} floating ip list; pwd
STEP_909.description := List the floating ips


#
# Verify the network
#
STEP_911_CMD := ip netns
STEP_911.description := Show ip netns

STEP_912_CMD := $::TQ_CONFIG{OS_ADMIN_CLI_NEUTRON} router-port-list router
STEP_912.description := list router ports

STEP_913_CMD := ping -c 4 $::TQ_CONFIG{ROUTER_IF_PROVIDER_IP}; pwd
STEP_913.description := Ping the provider ip

#
# Create m1.nano flavor
#

STEP_921_CMD := $::TQ_CONFIG{OS_ADMIN_CLI} flavor delete m1.nano;
STEP_921.description := Delete flavor named m1.nano if exists

STEP_922_CMD := $::TQ_CONFIG{OS_ADMIN_CLI} flavor create --id 0 --vcpus 1 --ram 64 --disk 1 m1.nano
STEP_922.description := Create flavor named m1.nano

STEP_923_CMD := $::TQ_CONFIG{OS_ADMIN_CLI} flavor create --id 100 --vcpus 2 --ram 1024 --disk 5 m2.normal
STEP_923.description := Create flavor named m2.normal

#
# Generate a key pair
#

STEP_931_CMD := $::TQ_CONFIG{OS_ADMIN_CLI} keypair delete mykey; pwd
STEP_931.description :=Delete keypair using the existing public key

STEP_932_CMD := $::TQ_CONFIG{OS_ADMIN_CLI} keypair create --public-key ~/.ssh/id_rsa.pub mykey
STEP_932.description := Generate key pair using the existing public key

STEP_933_CMD := $::TQ_CONFIG{OS_ADMIN_CLI} keypair list; pwd
STEP_933.description := Verify keypair geneated

STEP_934_CMD := $::TQ_CONFIG{OS_ADMIN_CLI} security group delete mygroup; $::TQ_CONFIG{OS_ADMIN_CLI} security group create mygroup --description "my security group"
STEP_934.description := Create the security group

STEP_935_CMD := $::TQ_CONFIG{OS_ADMIN_CLI} security group rule create --proto icmp mygroup
STEP_935.description := Add security group rule allowing icmp ping

STEP_936_CMD := $::TQ_CONFIG{OS_ADMIN_CLI} security group rule create --proto tcp --dst-port 22 mygroup
STEP_936.description := Add security group rules alllowing ssh

STEP_937_CMD := $::TQ_CONFIG{OS_ADMIN_CLI} security group rule list mygroup; pwd
STEP_937.description := List security group rules

#
# Create volume instance
#
STEP_941_CMD := $::TQ_CONFIG{OS_ADMIN_CLI} volume delete volume1; pwd
STEP_941.description := Delete the volume instance

STEP_942_CMD := $::TQ_CONFIG{OS_ADMIN_CLI} volume create volume1 --size 1
STEP_942.description := Create the volume instance with 1Gb size

STEP_943_CMD := $::TQ_CONFIG{OS_ADMIN_CLI} volume list; pwd
STEP_943.description := Check the status of the instance


