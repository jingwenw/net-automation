#
# This is to setup OpenStack on the ubuntu server 16.04
#
# NOTES:
#   - For interactive cmd, please append "pwd" at the end.
#   - Built-in func: MYE_UPDATE_FILE
#
# ref: https://docs.openstack.org/ocata/install-guide-ubuntu
#
# Prerequisites:
#   - The basic IP network should be up running; and
#   - The ssh connection should be configured with out passwd typed
#     e.g.,
#     - echo "stack ALL=(ALL) NOPASSWD: ALL" | sudo tee -a /etc/sudoers
#     - echo "cinder ALL=(ALL) NOPASSWD: ALL" | sudo tee -a /etc/sudoers
#     - echo "nova ALL = (root) NOPASSWD: /usr/bin/nova-rootwrap /etc/nova/rootwrap.conf *" | sudo tee -a /etc/sudoers
#
#   - If behind a proxy, please do not forget to set the env:
#      export no_proxy=localhost,127.0.0.1,controller,compute1
#   - The following entry in /etc/hosts must be removed:
#      127.0.1.1 localhost 
#   - NTP time sync is critical for some OpenStack services, e.g., if a big
#     gap exists, cinder-volume would be in "down" state.
#

#
# The global variables for this project
#
OS_CONTROLLER_IF_MANAGEMENT := 10.0.0.11/24

OS_CONTROLLER_IF_PROVIDER_NAME := enp0s25
OS_COMPUTE1_IF_PROVIDER_NAME := eth0
#OS_COMPUTE1_IF_PROVIDER_NAME := enp1s0f1

OS_NET := 10.0.0.0/24
OS_CONTROLLER_NAME := controller
OS_CONTROLLER_IP := 10.0.0.11
OS_COMPUTE1_NODE_NAME := compute1
OS_COMPUTE1_NODE_IP := 10.0.0.31
OS_BLOCK1_NODE_NAME := block1
OS_BLOCK1_NODE_IP := 10.0.0.41
OS_OBJECT1_NODE_NAME := object1
OS_OBJECT1_NODE_IP := 10.0.0.51
OS_OBJECT2_NODE_NAME := object2
OS_OBJECT2_NODE_IP := 10.0.0.52

# The default password for all the service users
OS_PASSWORD := stack

# The stable ntp server either name or ip:
OS_NTP_SERVER := 10.121.52.95

#
# The build in cmd: MYEX_UPDATE_FILE::$file::$id::$update::area::trailing
#
NET_UPDATE_CMD_CONTROLLER := MYEX_UPDATE_FILE::/etc/network/interfaces::# OpenStack: the provider netif::# OpenStack: the provider netif\nauto $::TQ_CONFIG{OS_CONTROLLER_IF_PROVIDER_NAME}\niface $::TQ_CONFIG{OS_CONTROLLER_IF_PROVIDER_NAME} inet manual\nup if link set dev $IFACE up\ndown ip link set dev $IFACE down\n::$::

NET_UPDATE_CMD_COMPUTE1 := MYEX_UPDATE_FILE::/etc/network/interfaces::# OpenStack: the provider netif::# OpenStack: the provider netif\nauto $::TQ_CONFIG{OS_COMPUTE1_IF_PROVIDER_NAME}\niface $::TQ_CONFIG{OS_COMPUTE1_IF_PROVIDER_NAME} inet manual\nup if link set dev \$IFACE up\ndown ip link set dev \$IFACE down\n::$::



NTP_UPDATE_CMD_CONTROLLER := MYEX_UPDATE_FILE::/etc/chrony/chrony.conf::server $::TQ_CONFIG{OS_NTP_SERVER} iburst::\nserver $::TQ_CONFIG{OS_NTP_SERVER} iburst\nallow $::TQ_CONFIG{OS_NET}\n::$::

NTP_UPDATE_CMD_OTHERS := MYEX_UPDATE_FILE::/etc/chrony/chrony.conf::^#MYEX ID NTP::\\n#MYEX ID NTP\nserver $::TQ_CONFIG{OS_CONTROLLER_NAME} iburst\n::$::

#
# Ubuntu initial sudo passwd
#

STEP_000.CMD := sudo pwd
STEP_000.description:= Root privilege required for this setup


#
# Config OpenStack networks
#

STEP_010.CMD := $::TQ_CONFIG{NET_UPDATE_CMD_CONTROLLER}
STEP_010.description:= Configure the controller provider netif

#
# To-do: it seems $IFACE has been interpreted as a variable by mistake?
#
STEP_011.CMD := ssh $::TQ_CONFIG{OS_COMPUTE1_NODE_IP} "$::TQ_CONFIG{NET_UPDATE_CMD_COMPUTE1}"
STEP_011.description:= Configure the compute1 node provider netif

STEP_012.CMD := echo sudo cp $::TQ_CONFIG{CFG_ROOT_DIR}/os_etc_hosts /etc/hosts
STEP_012.description:= Set controller hosts

STEP_013.CMD := scp $::TQ_CONFIG{CFG_ROOT_DIR}/os_etc_hosts $::TQ_CONFIG{OS_COMPUTE1_NODE_IP}:.; ssh $::TQ_CONFIG{OS_COMPUTE1_NODE_IP} "sudo cp os_etc_hosts /etc/hostss"
STEP_013.description:= Install hosts to compute node

STEP_015.CMD := scp $::TQ_CONFIG{CFG_ROOT_DIR}/os_etc_hosts $::TQ_CONFIG{OS_BLOCK1_NODE_IP}:.; ssh $::TQ_CONFIG{OS_BLOCK1_NODE_IP} "sudo cp os_etc_hosts /etc/hostss"
STEP_015.description:= Install hosts to block node



#
# Config NTP
#
STEP_021.CMD := sudo apt install chrony -y
STEP_021.description:= Install NTP server on controller

STEP_022.CMD := $::TQ_CONFIG{NTP_UPDATE_CMD_CONTROLLER}
STEP_022.description:= Configure the stable NTP server

STEP_023.CMD := sudo service chrony restart
STEP_023.description:= Restart the NTP server

STEP_024.CMD := ssh $::TQ_CONFIG{OS_COMPUTE1_NODE_IP} "sudo apt install chrony -y"
STEP_024.description:= Install NTP service on compute node

STEP_025.CMD := ssh $::TQ_CONFIG{OS_COMPUTE1_NODE_IP} "$::TQ_CONFIG{NTP_UPDATE_CMD_OTHERS}"
STEP_025.description:= Configure the NTP service on compute node

STEP_026.CMD := ssh $::TQ_CONFIG{OS_COMPUTE1_NODE_IP} "sudo service chrony restart"
STEP_026.description:= Restart NTP service on compute node

STEP_027.CMD := ssh $::TQ_CONFIG{OS_BLOCK1_NODE_IP} "sudo apt install chrony -y"
STEP_027.description:= Install NTP service on block node

STEP_028.CMD := ssh $::TQ_CONFIG{OS_BLOCK1_NODE_IP} "$::TQ_CONFIG{NTP_UPDATE_CMD_OTHERS}"
STEP_028.description:= Configure the NTP service on Block1 node

STEP_029.CMD := ssh $::TQ_CONFIG{OS_BLOCK1_NODE_IP} "sudo service chrony restart"
STEP_029.description:= Restart NTP service on Block1 node

STEP_030.CMD := sudo chronyc sources; pwd
STEP_030.description:= Verify the NTP server

#
# Install apache2
#

STEP_031.CMD := sudo apt install apache2 -y
STEP_031.description:= Install apache2

#
# Install OpenStack packages
#

STEP_110.CMD := sudo apt install software-properties-common -y
STEP_110.description := Install the software properties common package

STEP_111.CMD := sudo add-apt-repository cloud-archive:ocata -y
STEP_111.description := Enable the OpenStack repository

STEP_112.CMD := sudo apt update && sudo apt upgrade -y && sudo apt dist-upgrade -y
STEP_112.description := Upgrade the packages

STEP_113.CMD := sudo apt install python-openstackclient -y
STEP_113.description := Install the OpenStack client

STEP_120.CMD := ssh $::TQ_CONFIG{OS_COMPUTE1_NODE_IP} "sudo apt install software-properties-common -y"
STEP_120.description := Install the software properties common package on others

STEP_121.CMD := ssh $::TQ_CONFIG{OS_COMPUTE1_NODE_IP} "sudo add-apt-repository cloud-archive:ocata -y"
STEP_121.description := Enable the OpenStack repository on compute node

STEP_122.CMD := ssh $::TQ_CONFIG{OS_COMPUTE1_NODE_IP} "sudo apt update && sudo apt upgrade -y && sudo apt dist-upgrade -y"
STEP_122.description := Upgrade the packages on compute node

STEP_123.CMD := ssh $::TQ_CONFIG{OS_COMPUTE1_NODE_IP} "sudo apt install python-openstackclient -y"
STEP_123.description := Install the OpenStack client on compute node

STEP_125.CMD := ssh $::TQ_CONFIG{OS_BLOCK1_NODE_IP} "sudo apt install software-properties-common -y"
STEP_125.description := Install software properties common package on block1

STEP_126.CMD := ssh $::TQ_CONFIG{OS_BLOCK1_NODE_IP} "sudo add-apt-repository cloud-archive:ocata -y"
STEP_126.description := Enable the OpenStack repository on block1 node

STEP_127.CMD := ssh $::TQ_CONFIG{OS_BLOCK1_NODE_IP} "sudo apt update && sudo apt upgrade -y && sudo apt dist-upgrade -y"
STEP_127.description := Upgrade the packages on block1 node

STEP_128.CMD := ssh $::TQ_CONFIG{OS_BLOCK1_NODE_IP} "sudo apt install python-openstackclient -y"
STEP_128.description := Install the OpenStack client on block1 node


#
# Install SQL database, message queue, and memcached
#    Typically on controller node only
#
# Note: charset needs to be utf8, otherwise you would get key too long error.
#       the install-guide, referenced in the beginning of this cfg, is not
#       sufficient: not only openstack.cnf needs change, but also others, like
#       the followings
#

STEP_130.CMD := sudo apt install mariadb-server python-pymysql -y
STEP_130.description := Install the mysql db

STEP_131.CMD := echo "[mysqld]" | sudo tee /etc/mysql/mariadb.conf.d/99-openstack.cnf; echo "bind-address = $::TQ_CONFIG{OS_CONTROLLER_IP}" | sudo tee -a /etc/mysql/mariadb.conf.d/99-openstack.cnf; echo "default-storage-engine = innodb" | sudo tee -a /etc/mysql/mariadb.conf.d/99-openstack.cnf; echo "innodb_file_per_table" | sudo tee -a /etc/mysql/mariadb.conf.d/99-openstack.cnf; echo "max_connections = 4096" | sudo tee -a /etc/mysql/mariadb.conf.d/99-openstack.cnf; echo "collation-server = utf8_general_ci" | sudo tee -a /etc/mysql/mariadb.conf.d/99-openstack.cnf; echo "character-set-server = utf8" | sudo tee -a /etc/mysql/mariadb.conf.d/99-openstack.cnf
STEP_131.description := Configure the mysql db

STEP_132.CMD := sudo sed -i 's/^character-set-server.*/character-set-server  = utf8/' /etc/mysql/mariadb.conf.d/50-server.cnf; sudo sed -i 's/^collation-server.*/collation-server = utf8_general_ci/' /etc/mysql/mariadb.conf.d/50-server.cnf
STEP_132.description := Configure the db charset

STEP_135.CMD := sudo sed -i 's/^default-character-set.*/default-character-set = utf8/' /etc/mysql/mariadb.conf.d/50-client.cnf
STEP_135.description := Configure the db client charset

STEP_136.CMD := sudo sed -i 's/^default-character-set.*/default-character-set = utf8/' /etc/mysql/mariadb.conf.d/50-mysql-clients.cnf
STEP_136.description := Configure the db clients charset

STEP_138.CMD := sudo service mysql restart
STEP_138.description := Restart the mysql db

# This is the interactive cmd, so run it manually
STEP_139.CMD := sudo mysql_secure_installation; pwd
STEP_139.description := Secure the mysql db

#
# Install and configure message queue and memcache
3

STEP_144.CMD := sudo apt install rabbitmq-server memcached python-memcache -y
STEP_144.description := Install the message queue rabbitmq memcached

STEP_145.CMD := sudo rabbitmqctl add_user openstack stack; pwd
STEP_145.description := RabbitMQ create user

STEP_146.CMD := sudo rabbitmqctl set_permissions openstack ".*" ".*" ".*"
STEP_146.description := RabbitMQ set permissions

STEP_147.CMD := sudo sed -i 's/^-l 127.0.0.1.*/-l $::TQ_CONFIG{OS_CONTROLLER_IP}/' /etc/memcached.conf
STEP_147.description := Configure memcached

STEP_148.CMD := sudo service memcached restart
STEP_148.description := Restart the memcached

