#
# Build DPDK
#   NOTE 1:  The following 2 DPDP shell enviroments should be set:
#             $RTE_SDK
#             $RTE_TARGET
#
#   NOTE 2: hugepages = 2500 needs to be set and nodev needs to be mount, e.g.,
#           - in /etc/sysctl.conf:
#             vm.nr_hugepages = 2500
#           - in /etc/fstab:
#             nodev /mnt/huge hugetlbfs defaults 0 0
#
#   NOTE 3: some io configs need to be done for linux boot options, e.g.:
#           1. Edit in /etc/default/grub.cfg:
#  GRUB_CMDLINE_LINUX_DEFAULT="hugepages=2500 iommu=pt intel_iommu=on spash"
#  or: sed -n 's/GRUB_CMDLINE_LINUX_DEFAULT="\(.*\)"/GRUB_CMDLINE_LINUX_DEFAULT="\1 hugepages=2500 iommu=pt intel_iommu=on spash /p' /etc/default/grub
#     e.g.: GRUB_CMDLINE_LINUX_DEFAULT="default_hugepagesz=2M hugepagesz=2M
#                    hugepages=1536 iommu=pt intel_iommu=on spash vt.handoff=7"
#           2. run "update-grub2"
#           3. reboot or init 6
#
#          or runtime set: echo 1536 > /proc/sys/vm/nr_hugepages
#
#   NOTE4: When using DPDK with OVS, VFIO-PCI is required, and uio_generic/uio
#          are obsolete.
#          And the IO module is only required for physical nic binding.
#

#
# The global variables for this project
#

DPDK_PORT0_PCI_SLOT := 0000:01:00.0
DPDK_PORT1_PCI_SLOT := 0000:01:00.1

#
# Build Open vSwitch from source
#

STEP_000.CMD := sudo pwd
STEP_000.description:= Root privilege required for this setup

STEP_001.CMD := make clean; git clean -xfd; sudo ./tools/dpdk-devbind.py --unbind $::TQ_CONFIG{DPDK_PORT0_PCI_SLOT}; sudo ./tools/dpdk-devbind.py --unbind $::TQ_CONFIG{DPDK_PORT0_PCI_SLOT}; pwd
STEP_001.description:= Cleanup

STEP_002.CMD := sudo rmmod "$RTE_SDK/$RTE_TARGET/kmod/igb_uio.ko"; sudo rmmod "$RTE_SDK/$RTE_TARGET/kmod/rte_kni.ko"; pwd
STEP_002.description:= Unload modules if loaded

STEP_003.CMD := make config T=x86_64-native-linuxapp-gcc
STEP_003.description:= configure the Target for DPDK

STEP_004.CMD := sed -ri 's,(PMD_PCAP=).*,\1y,' build/.config
STEP_004.description:= Enable pcap

STEP_005.CMD := sudo umount /dev/hugepages; echo 1536 | sudo tee /proc/sys/vm/nr_hugepages
STEP_005.description:= Umount hugepages meory dev if already mounted

STEP_006.CMD := echo sudo sed 's/CONFIG_RTE_BUILD_COMBINE_LIBS=n/CONFIG_RTE_BUILD_COMBINE_LIBS=y/' -i config/common_linuxapp
STEP_006.description:= Build for OVS

STEP_007.CMD := sed -i 's/^CPUFLAGS += SSE4_2/#&/' mk/rte.cpuflags.mk
STEP_007.description := Fix the cpu flag issue

STEP_009.CMD := export EXTRA_CFLAGS='-fPIC -msse4 -march=native'; make install T=x86_64-native-linuxapp-gcc DESTDIR=install
STEP_009.description:= To build and install DPDK

#
# NOTE: The followings is NOT needed if no physical nic used
#

STEP_020.CMD := sudo modprobe uio; sudo modprobe uio_pci_generic; sudo modprobe vfio-pci
STEP_020.description := Load IO module for DPDK

STEP_021.CMD := sudo chmod a+x /dev/vfio; sudo chmod 0666 /dev/vfio/*
STEP_021.description := VFIO device permission

STEP_022.CMD := sudo mount -t hugetlbfs none /dev/hugepages``
STEP_022.description := Mount the hugepages

STEP_023.CMD := sudo insmod "$RTE_SDK/$RTE_TARGET/kmod/igb_uio.ko"
STEP_023.description := Load the igb modules for DPDK

STEP_024.CMD := sudo insmod "$RTE_SDK/$RTE_TARGET/kmod/rte_kni.ko"
STEP_024.description := Load the rte modules for DPDK

STEP_025.CMD := sudo  $RTE_SDK/tools/dpdk-devbind.py --bind=igb_uio $::TQ_CONFIG{DPDK_PORT0_PCI_SLOT}
STEP_025.description := Bind DPDK nic #1

STEP_026.CMD := sudo  $RTE_SDK/tools/dpdk-devbind.py --bind=igb_uio $::TQ_CONFIG{DPDK_PORT1_PCI_SLOT}
STEP_026.description := Bind DPDK nic #2

#
# Verify DPDK build
#

STEP_030.CMD := cd examples/helloworld/; make
STEP_030.description := Build exmaple app of helloWorld

STEP_031.CMD := sudo ./examples/helloworld/build/helloworld; pwd
STEP_031.description := Run the app of helloWorld

# sudo ./install/bin/testpmd -c 0x3  -- -i --portmask=0x3  --nb-cores=1
STEP_039.CMD := sudo ./install/bin/testpmd; pwd
STEP_039.description := Verify DPDK
