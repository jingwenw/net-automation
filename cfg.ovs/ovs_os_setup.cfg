#
# Build OVS With OpenStack Support
#
#   NOTES:
#         - 2 VM images should be created already, as specified by:
#           VM1_IMAGE_PATH and VM2_IMAGE_PATH
#
#         - DPDP should be built already before preceeding this script furtuer
#           with ovs, e.g. by following dpdk_build.cfg
#
#         - The following 2 DPDP shell enviroments should be set:
#             $RTE_SDK
#             $RTE_TARGET
#
#         - When building OVS, it is optional for DPDK "--with-kernel" but
#           required for non-DPDK (e.g. tap ports);
#

#
# The global variables for this project
#

OVS_ETC_DIR := /usr/local/etc/openvswitch
OVS_VAR_DIR := /usr/local/var/run/openvswitch
OVS_DB_SOCK := /usr/local/var/run/openvswitch/db.sock

OFC_POX_ROOT := /home/james/myRepos/packetier-ofcontroller

VM1_IMAGE_PATH := /home/james/myVMs/vm1/vm1.img
VM2_IMAGE_PATH := /home/james/myVMs/vm2/vm2.img
VM_IFUP_SCRIPT := /home/james/myRepos/packetier-tools/cfg.ovs/ifup.sh
VM_IFDOWN_SCRIPT := /home/james/myRepos/packetier-tools/cfg.ovs/ifdown.sh

DPDK_PORT0_PCI_SLOT := 0000:01:00.0
DPDK_PORT1_PCI_SLOT := 0000:01:00.1

#
# Build Open vSwitch from source
#

STEP_000.CMD := sudo pwd
STEP_000.description:= Root privilege required for this setup

#flake8 check fails the current OVS version so ignore it if it exists
STEP_001.CMD := sed -i 's/; else exit 1; fi/; else exit 0; fi/' Makefile.am; ./boot.sh; ./configure --with-dpdk="$RTE_SDK/$RTE_TARGET" --enable-Werror --with-linux=/lib/modules/$(uname -r)/build
STEP_001.description:= Configure the build of Open vSwitch with DPDK

STEP_002.CMD := sudo pkill -9 ovs; sudo rm -rf $::TQ_CONFIG{OVS_ETC_DIR}/*
STEP_002.description:= cleanup etc

STEP_003.CMD := sudo rm -rf $::TQ_CONFIG{OVS_ETC_DIR}/.conf.db*~; pwd
STEP_003.description:= cleanup db lock

STEP_005.CMD := sudo umount /dev/hugepages; pwd
STEP_005.description:= Umount hugepages meory dev if already mounted

STEP_007.CMD := sudo make
STEP_007.description:= To build vSwitch with DPDK

STEP_008.CMD := sudo make install
STEP_008.description:= To install vSwitch with DPDK

STEP_009.CMD := sudo modprobe -i openvswitch; pwd
#STEP_009.CMD := sudo make modules_install; sudo modprobe -i openvswitch; pwd
STEP_009.description:= To Install modules of vSwitch with DPDK
#$ config_file="/etc/depmod.d/openvswitch.conf"
#$ for module in datapath/linux/*.ko; do
#  modname="$(basename ${module})"
#  echo "override ${modname%.ko} * extra" >> "$config_file"
#  echo "override ${modname%.ko} * weak-updates" >> "$config_file"
#  done
#$ depmod -a
#


#
# Setup Open vSwitch
#

STEP_010.CMD := virsh net-destroy default; virsh net-autostart --disable default; sudo systemctl restart libvirtd
STEP_010.description := Stop default virt brige

STEP_011.CMD := sudo rm -rf $::TQ_CONFIG{OVS_VAR_DIR}/*
STEP_011.description:= cleanup var

STEP_012.CMD := sudo mkdir -p $::TQ_CONFIG{OVS_ETC_DIR}; sudo chmod 777 $::TQ_CONFIG{OVS_ETC_DIR}
STEP_012.description := Prepare the dir of etc

STEP_013.CMD := sudo mkdir -p $::TQ_CONFIG{OVS_VAR_DIR}; sudo chmod 777 $::TQ_CONFIG{OVS_VAR_DIR}
STEP_013.description := Prepare the dir of var

STEP_015.CMD := sudo ovsdb-tool create $::TQ_CONFIG{OVS_ETC_DIR}/conf.db ./vswitchd/vswitch.ovsschema
STEP_015.description := Create OVS DB

STEP_016.CMD := sudo ovsdb-server --remote=punix:$::TQ_CONFIG{OVS_VAR_DIR}/db.sock --remote=db:Open_vSwitch,Open_vSwitch,manager_options --pidfile --detach
STEP_016.description := Start ovsdb-server

STEP_017.CMD := sudo ovs-vsctl --no-wait init
STEP_017.description := Init the switch - no harm if running multiple time

#
# To-do: DPDK, the followings might NOT be needed if no physical nic used?
#
STEP_020.CMD := sudo modprobe uio; sudo modprobe uio_pci_generic; sudo modprobe vfio-pci
STEP_020.description := Load UIO module for DPDK

STEP_021.CMD := sudo chmod a+x /dev/vfio; sudo chmod 0666 /dev/vfio/*
STEP_021.description := Set VFIO dev permission

STEP_022.CMD := sudo mount -t hugetlbfs none /dev/hugepages``
STEP_022.description := Mount the hugepages

STEP_024.CMD := sudo insmod "$RTE_SDK/$RTE_TARGET/kmod/igb_uio.ko"; sudo insmod "$RTE_SDK/$RTE_TARGET/kmod/rte_kni.ko"; pwd
STEP_024.description := Load the igb modules for DPDK

STEP_025.CMD := sudo  $RTE_SDK/tools/dpdk-devbind.py --bind=igb_uio $::TQ_CONFIG{DPDK_PORT0_PCI_SLOT}
STEP_025.description := Bind DPDK nic #1

#STEP_026.CMD := sudo  $RTE_SDK/tools/dpdk-devbind.py --bind=igb_uio $::TQ_CONFIG{DPDK_PORT1_PCI_SLOT}
#STEP_026.description := Bind DPDK nic #2


#
# Launch Open vSwitch with DPDK support
#

STEP_030.CMD := export DB_SOCK=$::TQ_CONFIG{OVS_DB_SOCK}
STEP_030.description := Setup the DB sock env

STEP_031.CMD := sudo ovs-vsctl --no-wait set Open_vSwitch . other_config:dpdk-init=true
STEP_031.description := Init OVS with DPDK

STEP_032.CMD := sudo ovs-vsctl --no-wait set Open_vSwitch . other_config:dpdk-socket-mem="1024,0"
STEP_032.description := Init OVS memory with DPDK

STEP_039.CMD := sudo ovs-vswitchd unix:$::TQ_CONFIG{OVS_VAR_DIR}/db.sock --pidfile --detach --log-file=/tmp/logs/ovs-vswitchd.log
STEP_039.description := Start the daemon of ovs-vswitchd

#
# Creat a vSwitch with DPDK ports
#

STEP_051.CMD := sudo ovs-vsctl add-br br-dpdk -- set bridge br-dpdk datapath_type=netdev
STEP_051.description := Create bridge supporting DPDK

STEP_052.CMD := sudo ./utilities/ovs-vsctl add-port br-dpdk dpdk0 -- set Interface dpdk0 type=dpdk options:dpdk-devargs=$::TQ_CONFIG{DPDK_PORT0_PCI_SLOT} ofport_request=1
STEP_052.description := Add the 1st port supporting DPDK

#STEP_053.CMD := sudo ./utilities/ovs-vsctl add-port br-dpdk dpdk1 -- set Interface dpdk1 type=dpdk options:dpdk-devargs=$::TQ_CONFIG{DPDK_PORT1_PCI_SLOT} ofport_request=2
#STEP_053.description := Add the 2nd port supporting DPDK

STEP_054.CMD := sudo ovs-vsctl add-port br-dpdk dpdkvhostuser0  -- set Interface dpdkvhostuser0 type=dpdkvhostuser ofport_request=3
STEP_054.description := Add the dpdkvhostuser port #1

STEP_055.CMD := sudo ifconfig enp3s0f0 up; sudo ifconfig enp3s0f1 up; sudo ifconfig enp1s0f1 up; sudo ovs-vsctl add-port br-nodpdk enp3s0f0; sudo ovs-vsctl add-port br-nodpdk enp3s0f1; sudo ovs-vsctl add-port br-nodpdk enp1s0f1; pwd
#STEP_055.CMD := sudo ovs-vsctl add-port br-dpdk dpdkvhostuser1  -- set Interface dpdkvhostuser1 type=dpdkvhostuser ofport_request=4
STEP_055.description := Add the dpdkvhostuser port #2

STEP_056.CMD := sudo ovs-vsctl add-br br-nodpdk
STEP_056.description := Create bridge NO supporting DPDK

STEP_057.CMD := sudo ovs-vsctl add-port br-nodpdk tap1
STEP_057.description := Create the tap port #1

STEP_058.CMD := sudo ovs-vsctl add-port br-nodpdk tap2
STEP_058.description := Create the tap port #2

STEP_059.CMD := sudo ifconfig br-nodpdk 10.0.0.1/24
#; sudo ifconfig br-dpdk 192.168.202.16/24
STEP_059.description := Configure and brining up the bridge ports.

#
# Verifying the vSwitch
#

STEP_061.CMD := sudo ovs-appctl dpif-netdev/pmd-stats-show
STEP_061.description := PMD thread statistics

STEP_062.CMD := sudo ovs-appctl dpif-netdev/pmd-rxq-show
STEP_062.description := Port/RXQ Assignment to PMD Threads

STEP_067.CMD := echo sudo ovs-vsctl set port dpdkvhostuser0 qos=@newqos -- --id=@newqos create qos type=egress-policer other-config:cir=46000000 other-config:cbs=2048
STEP_067.description := Configure QOS on DPDK0

STEP_068.CMD := echo sudo ovs-appctl -t ovs-vswitchd qos/show dpdkvhostuser0
STEP_068.description := Show QOS Configuration

#
# Connect the OVS bridges to the OpenFlow controller, POX
#

STEP_071.CMD := cd $::TQ_CONFIG{OFC_POX_ROOT};./pox.py forwarding.l2_learning &
STEP_071.description := Launch the of controller POX

STEP_075.CMD := sudo ovs-vsctl set-controller br-dpdk tcp:0.0.0.0:6633
STEP_075.description := Set the controller of the OVS bridges

STEP_076.CMD := sudo ovs-vsctl set-controller br-nodpdk tcp:0.0.0.0:6633
STEP_076.description := Set the controller of the OVS bridges

#
# Start VMs: VM1 and VM2 have been created earlier - details see vm_build.cfg
#
STEP_091.CMD := sudo qemu-system-x86_64 -m 1024 -cpu host -hda $::TQ_CONFIG{VM1_IMAGE_PATH} -boot c -enable-kvm -no-reboot -vnc :0 -chardev socket,id=char1,path=/usr/local/var/run/openvswitch/dpdkvhostuser0 -netdev type=vhost-user,id=mynet1,chardev=char1,vhostforce -device virtio-net-pci,mac=00:22:9b:6c:e5:11,netdev=mynet1 -object memory-backend-file,id=mem,size=1024M,mem-path=/dev/hugepages,share=on -numa node,memdev=mem -mem-prealloc -net nic,macaddr=00:22:9b:6c:e5:12 -net tap,ifname=tap1,script=$::TQ_CONFIG{VM_IFUP_SCRIPT},downscript=$::TQ_CONFIG{VM_IFDOWN_SCRIPT} &
STEP_091.description := Start VM1 so that access via ssh 10.0.0.201

STEP_092.CMD := sudo qemu-system-x86_64 -m 1024 -cpu host -hda $::TQ_CONFIG{VM2_IMAGE_PATH} -boot c -enable-kvm -no-reboot -vnc :1 -chardev socket,id=char1,path=/usr/local/var/run/openvswitch/dpdkvhostuser1 -netdev type=vhost-user,id=mynet1,chardev=char1,vhostforce -device virtio-net-pci,mac=00:22:9b:6c:e5:21,netdev=mynet1 -object memory-backend-file,id=mem,size=1024M,mem-path=/dev/hugepages,share=on -numa node,memdev=mem -mem-prealloc -net nic,macaddr=00:22:9b:6c:e5:22 -net tap,ifname=tap2,script=$::TQ_CONFIG{VM_IFUP_SCRIPT},downscript=$::TQ_CONFIG{VM_IFDOWN_SCRIPT}&
STEP_092.description := Start VM2 so that access via ssh 192.168.201.2

STEP_098.CMD := sudo route add -net 192.168.202.0/24 gw 10.0.0.201 br-nodpdk
STEP_098.description := Add the ip route to network on br-dpdk

#
# Configure the flows
#

#STEP_101.CMD := sudo ./utilities/ovs-ofctl del-flows br-dpdk
#STEP_101.description := To clear the flows

#STEP_102.CMD := sudo ./utilities/ovs-ofctl add-flow br-dpdk in_port=3,action=output:4
#STEP_102.description := To add the flow #1

#STEP_103.CMD := sudo ./utilities/ovs-ofctl add-flow br-dpdk in_port=4,action=output:3
#STEP_103.description := To add the flow #2

STEP_199.CMD := echo sudo ovs-vsctl show; sudo ovs-ofctl dump-ports br-dpdk; sudo ovs-ofctl dump-ports br-nodpdk
STEP_199.description := Show The vSwitch and dump ports
