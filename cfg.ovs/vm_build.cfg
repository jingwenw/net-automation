#
# The global variables for this project
#
GUEST_OS_ISO := =/home/james/myVMs/ubuntu-16.04.1-server-amd64.iso
GUEST_DISK_PATH := /home/james/myVMs

#
# Create VMs with KVM/QEMU
#
# NOTE: To begin, you must change the user and group that libvirt runs under,
#       configure access control policy and restart libvirtd.
#
#       - In /etc/libvirt/qemu.conf add/edit the following lines:
#           user = "root"
#           group = "root"
#
#       - Disable SELinux or set to permissive mode if SELinux installed:
#           $ setenforce 0
#
#       - Finally, restart the libvirtd process, For example, on Fedora:
#           $ systemctl restart libvirtd.service
#

STEP_000.CMD := sudo pwd
STEP_000.description:= Root privilege required for this setup

#
# Creat VMs via virt-install with 2 Options:
#

#
# Create VMs via virt-install - just needs to run once for VM1, and clone the
#    resulted image to VM2 by simply copy. --extra-args="console=ttyS0" might
#    needed for console
#

#STEP_011.CMD := sudo virt-install -n vm1 -r 1024 --hvm --disk path=$::TQ_CONFIG{GUEST_DISK_PATH}/vm1.img,size=10 --cpu host --cdrom $::TQ_CONFIG{GUEST_OS_ISO} --graphic vnc --debug
#STEP_011.description := Install the guest os with VNC connection

# Or:
#STEP_012.CMD := sudo virt-install -n vm1 -r 1024 --hvm --disk path=$::TQ_CONFIG{GUEST_DISK_PATH}/vm1.img,size=10 --cpu host --location $::TQ_CONFIG{GUEST_OS_ISO} --graphic vnc --debug --extra-args="console=ttyS0"
#STEP_012.description := Install the guest os with console enabled
#
# NOTE: to connect to the VM after the above cli, run "vncviewer :0" from a
#       reachable place to install the os inside of the vm, and use the
#       company official proxy !!!!!
#

#STEP_013.CMD := sudo cp -P $::TQ_CONFIG{GUEST_DISK_PATH}/vm1.img $::TQ_CONFIG{GUEST_DISK_PATH}/vm2.img
#STEP_013.description := Create VM2 by clone VM1

#STEP_015.CMD := sudo virsh start vm1; sudo virsh start vm2
#STEP_015.description := To start the VM


#
# Create VMs via QEMU - just needs to run once for VM1, and clone the
#    resulted image to VM2 by simply copy. What might
#    needed for console ???
#

#STEP_021.CMD := sudo sudo qemu-img create -f qcow2 =$::TQ_CONFIG{GUEST_DISK_PATH}/vm1.img 10G
#STEP_021.description := Create the VM raw image

#STEP_022.CMD := sudo qemu-system-x86_64 -hda $::TQ_CONFIG{GUEST_DISK_PATH}/vm1.img -cdrom $::TQ_CONFIG{GUEST_OS_ISO} -boot d  -m 640 -vnc :0
#STEP_022.description := Install the guest os

#STEP_023.CMD := sudo cp -P $::TQ_CONFIG{GUEST_DISK_PATH}/vm1.img $::TQ_CONFIG{GUEST_DISK_PATH}/vm2.img
#STEP_023.description := Create VM2 by clone VM1

#
# NOTE: After clone the VM image, the following ids need to be changed
#       to be unique:
#       - /etc/hostname
#       - /etc/network/interfaces
#       - /etc/hosts
#

#
# Start VMs with QUEMU
#
# NOTES:
#
#    - in the above cmd, use "-nographic" instead of "-vnc :0" for console and
#       "console=ttySS0" required in linux boot cmdline
#    - configure "console=ttyS0" in the linux boot cmdline so that the VMs will
#      start with console, along with "-nographic" option in qemu,
#

STEP_031.CMD := sudo qemu-system-x86_64 -m 1024 -cpu host -hda /home/james/myVMs/vm1/vm1.img -boot c -enable-kvm -no-reboot -nographic -chardev socket,id=char1,path=/usr/local/var/run/openvswitch/dpdkvhostuser0 -netdev type=vhost-user,id=mynet1,chardev=char1,vhostforce -device virtio-net-pci,mac=00:22:9b:6c:e5:11,netdev=mynet1 -object memory-backend-file,id=mem,size=1024M,mem-path=/dev/hugepages,share=on -numa node,memdev=mem -mem-prealloc -net nic,macaddr=00:22:9b:6c:e5:12 -net tap,ifname=tap1,script=no,downscript=no
STEP_031.description := Start VM1 with QUEMU-system with tap #1

STEP_032.CMD := sudo qemu-system-x86_64 -m 1024 -cpu host -hda /home/james/myVMs/vm2/vm2.img -boot c -enable-kvm -no-reboot -nographic -chardev socket,id=char1,path=/usr/local/var/run/openvswitch/dpdkvhostuser1 -netdev type=vhost-user,id=mynet1,chardev=char1,vhostforce -device virtio-net-pci,mac=00:22:9b:6c:e5:21,netdev=mynet1 -object memory-backend-file,id=mem,size=1024M,mem-path=/dev/hugepages,share=on -numa node,memdev=mem -mem-prealloc  -net nic,macaddr=00:22:9b:6c:e5:22 -net tap,ifname=tap2,script=no,downscript=no
STEP_032.description := Start VM2 with QUEMU-system with tap #2

STEP_033.CMD := sudo qemu-system-x86_64 -m 1024 -cpu host -hda /home/james/myVMs/vm1/vm1.img -boot c -enable-kvm -no-reboot -vnc :0 -chardev socket,id=char1,path=/usr/local/var/run/openvswitch/dpdkvhostuser0 -netdev type=vhost-user,id=mynet1,chardev=char1,vhostforce -device virtio-net-pci,mac=00:22:9b:6c:e5:11,netdev=mynet1 -object memory-backend-file,id=mem,size=1024M,mem-path=/dev/hugepages,share=on -numa node,memdev=mem -mem-prealloc -net nic,macaddr=00:22:9b:6c:e5:12 -net tap,ifname=tap1,script=no,downscript=no &
STEP_033.description := Start VM1 with QUEMU-system with tap #1

STEP_034.CMD := sudo qemu-system-x86_64 -m 1024 -cpu host -hda /home/james/myVMs/vm2/vm2.img -boot c -enable-kvm -no-reboot -vnc :1 -chardev socket,id=char1,path=/usr/local/var/run/openvswitch/dpdkvhostuser1 -netdev type=vhost-user,id=mynet1,chardev=char1,vhostforce -device virtio-net-pci,mac=00:22:9b:6c:e5:21,netdev=mynet1 -object memory-backend-file,id=mem,size=1024M,mem-path=/dev/hugepages,share=on -numa node,memdev=mem -mem-prealloc  -net nic,macaddr=00:22:9b:6c:e5:22 -net tap,ifname=tap2,script=no,downscript=no &
STEP_034.description := Start VM2 with QUEMU-system with tap #2

STEP_035.CMD := sudo ifconfig tap1 up; sudo ifconfig tap2 up
STEP_035.description := Bring up the tap ports

STEP_037.CMD := sudo qemu-system-x86_64 -m 1024 -cpu host -hda /home/james/myVMs/vm1/vm1.img -boot c -enable-kvm -no-reboot -vnc :0 -chardev socket,id=char1,path=/usr/local/var/run/openvswitch/dpdkvhostuser0 -netdev type=vhost-user,id=mynet1,chardev=char1,vhostforce -device virtio-net-pci,mac=00:22:9b:6c:e5:11,netdev=mynet1 -object memory-backend-file,id=mem,size=1024M,mem-path=/dev/hugepages,share=on -numa node,memdev=mem -mem-prealloc -net nic,macaddr=00:22:9b:6c:e5:12 -net tap,ifname=tap1,script=/home/james/myRepos/packetier-tools/cfg.ovs/ifup.sh,downscript=/home/james/myRepos/packetier-tools/cfg.ovs/ifdown.sh
STEP_037.description := Start VM1 with QUEMU-system with tap #1 with script

STEP_038.CMD := sudo qemu-system-x86_64 -m 1024 -cpu host -hda /home/james/myVMs/vm2/vm2.img -boot c -enable-kvm -no-reboot -vnc :1 -chardev socket,id=char1,path=/usr/local/var/run/openvswitch/dpdkvhostuser1 -netdev type=vhost-user,id=mynet1,chardev=char1,vhostforce -device virtio-net-pci,mac=00:22:9b:6c:e5:21,netdev=mynet1 -object memory-backend-file,id=mem,size=1024M,mem-path=/dev/hugepages,share=on -numa node,memdev=mem -mem-prealloc  -net nic,macaddr=00:22:9b:6c:e5:22 -net tap,ifname=tap2,script=/home/james/myRepos/packetier-tools/cfg.ovs/ifup.sh,downscript=/home/james/myRepos/packetier-tools/cfg.ovs/ifdown.sh
STEP_038.description := Start VM2 with QUEMU-system with tap #2 with script


STEP_039.CMD := ping 192.168.201.1; ping 192.168.202.1; pwd
STEP_039.description:= Verify the networking connections

